/**
 * generated by Xtext 2.29.0
 */
package fr.n7.simplePDL.textSimplePDL.impl;

import fr.n7.simplePDL.textSimplePDL.Guidance;
import fr.n7.simplePDL.textSimplePDL.Need;
import fr.n7.simplePDL.textSimplePDL.ProcessElement;
import fr.n7.simplePDL.textSimplePDL.Resource;
import fr.n7.simplePDL.textSimplePDL.TextSimplePDLFactory;
import fr.n7.simplePDL.textSimplePDL.TextSimplePDLPackage;
import fr.n7.simplePDL.textSimplePDL.WorkDefinition;
import fr.n7.simplePDL.textSimplePDL.WorkSequence;
import fr.n7.simplePDL.textSimplePDL.WorkSequenceType;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TextSimplePDLFactoryImpl extends EFactoryImpl implements TextSimplePDLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static TextSimplePDLFactory init()
  {
    try
    {
      TextSimplePDLFactory theTextSimplePDLFactory = (TextSimplePDLFactory)EPackage.Registry.INSTANCE.getEFactory(TextSimplePDLPackage.eNS_URI);
      if (theTextSimplePDLFactory != null)
      {
        return theTextSimplePDLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new TextSimplePDLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TextSimplePDLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case TextSimplePDLPackage.PROCESS: return createProcess();
      case TextSimplePDLPackage.WORK_DEFINITION: return createWorkDefinition();
      case TextSimplePDLPackage.WORK_SEQUENCE: return createWorkSequence();
      case TextSimplePDLPackage.PROCESS_ELEMENT: return createProcessElement();
      case TextSimplePDLPackage.GUIDANCE: return createGuidance();
      case TextSimplePDLPackage.NEED: return createNeed();
      case TextSimplePDLPackage.RESOURCE: return createResource();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case TextSimplePDLPackage.WORK_SEQUENCE_TYPE:
        return createWorkSequenceTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case TextSimplePDLPackage.WORK_SEQUENCE_TYPE:
        return convertWorkSequenceTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public fr.n7.simplePDL.textSimplePDL.Process createProcess()
  {
    ProcessImpl process = new ProcessImpl();
    return process;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WorkDefinition createWorkDefinition()
  {
    WorkDefinitionImpl workDefinition = new WorkDefinitionImpl();
    return workDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WorkSequence createWorkSequence()
  {
    WorkSequenceImpl workSequence = new WorkSequenceImpl();
    return workSequence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessElement createProcessElement()
  {
    ProcessElementImpl processElement = new ProcessElementImpl();
    return processElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Guidance createGuidance()
  {
    GuidanceImpl guidance = new GuidanceImpl();
    return guidance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Need createNeed()
  {
    NeedImpl need = new NeedImpl();
    return need;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Resource createResource()
  {
    ResourceImpl resource = new ResourceImpl();
    return resource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WorkSequenceType createWorkSequenceTypeFromString(EDataType eDataType, String initialValue)
  {
    WorkSequenceType result = WorkSequenceType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertWorkSequenceTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TextSimplePDLPackage getTextSimplePDLPackage()
  {
    return (TextSimplePDLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static TextSimplePDLPackage getPackage()
  {
    return TextSimplePDLPackage.eINSTANCE;
  }

} //TextSimplePDLFactoryImpl
