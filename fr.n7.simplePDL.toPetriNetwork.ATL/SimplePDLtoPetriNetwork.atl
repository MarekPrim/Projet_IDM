-- @path SimplePDL=/fr.n7.simplePDL/SimplePDL.ecore
-- @path Petrie=/fr.n7.petriNetwork/Petrie.ecore

module SimplePDLtoPetriNetwork;
create OUT : Petrie from IN : SimplePDL;

helper context SimplePDL!ProcessElement
def: getProcess() : SimplePDL!Process =
SimplePDL!Process.allInstances()->select(x | x.processElement->includes(self));

-- Transformation Process (élément racine SimplePDL) vers PetriNet (élément racine Petrie)
rule Process2PetriNet {
	from p: SimplePDL!Process
	to pn: Petrie!PetriNet (name <- p.name)
}

-- Traduire une WorkDefinition en un motif sur le réseau de Petri
rule WorkDefinition2PetriNet {
	from wd: SimplePDL!WorkDefinition
	to
		-- PLACES d'une WorkDefinition
		p_ready: Petrie!Place(
			name <- wd.name + '_ready',
			marking <- 1,
			petrinet <- wd.getProcess()
		),
		
		p_running: Petrie!Place(
			name <- wd.name + '_running',
			marking <- 0,
			petrinet <- wd.getProcess()
		),
		
		p_started: Petrie!Place(
			name <- wd.name + '_started',
			marking <- 0,
			petrinet <- wd.getProcess()
		),
		
		p_finished: Petrie!Place(
			name <- wd.name + '_finished',
			marking <- 0,
			petrinet <- wd.getProcess()
		),
		
		-- TRANSITIONS d'une WorkDefinition
		t_start: Petrie!Transition(
			name <- wd.name + '_start',
			petrinet <- wd.getProcess()
		),
		
		t_finish: Petrie!Transition(
			name <- wd.name + '_finish',
			petrinet <- wd.getProcess()
		),
		
		-- ARCS d'une WorkDefinition
		a_ready2start: Petrie!ArcSimple(
			weight <- 1,
			source <- p_ready,
			target <- t_start,
			petrinet <- wd.getProcess()
		),	
		
		a_start2running: Petrie!ArcSimple(
			weight <- 1,
			source <- t_start,
			target <- p_running,
			petrinet <- wd.getProcess()
		),
		
		a_start2started: Petrie!ArcSimple(
			weight <- 1,
			source <- t_start,
			target <- p_started,
			petrinet <- wd.getProcess()
		),
		
		a_running2finish: Petrie!ArcSimple(
			weight <- 1,
			source <- p_running,
			target <- t_finish,
			petrinet <- wd.getProcess()
		),
			
		a_finish2finished: Petrie!ArcSimple(
			weight <- 1,
			source <- t_finish,
			target <- p_finished,
			petrinet <- wd.getProcess()
		)
		
}

-- Traduire un ProcessElement en un motif sur le réseau de petri
rule WorkSequence2PetriNet {
	from ws: SimplePDL!WorkSequence
	to aws: Petrie!ArcRead(
			weight <- 1,
			source <- thisModule.resolveTemp(ws.predecessor, if(ws.linkType = #startToStart) or (ws.linkType = #startToFinish) then 'p_started' else 'p_finished' endif),
			target <- thisModule.resolveTemp(ws.successor, if(ws.linkType = #startToStart) or (ws.linkType = #finishToStart) then 't_start' else 't_finish' endif),
			petrinet <- ws.getProcess()
	)
}

-- Traduire une Ressource en un motif sur le réseau de petri
rule ressource2PetriNet {
	from rs: SimplePDL!Ressource
	to prs: Petrie!Place(
			name <- rs.name + '_ressource',
			marking <- rs.nbRessourceDisponible,
			petrinet <- rs.getProcess()
	)
}

-- Traduire un Besoin en un motif sur le réseau de petri
-- Remarque: Need n'hérite pas de ProcessElements : en l'occurrence, on doit passer
-- par la ressource (ou la WorkDefinition) liée au Need pour récup le Process
rule Need2PetriNet {
	from ne: SimplePDL!Need
	to 
		an_load: Petrie!ArcSimple(
				weight <- ne.nbRessources,
				source <- ne.ressource,
				target <- thisModule.resolveTemp(ne.workdefinition, 't_start'),
				petrinet <- ne.ressource.getProcess()
		),
		an_release: Petrie!ArcSimple(
				weight <- ne.nbRessources,
				source <- thisModule.resolveTemp(ne.workdefinition, 't_finish'),
				target <- ne.ressource,
				petrinet <- ne.ressource.getProcess()
		)
}